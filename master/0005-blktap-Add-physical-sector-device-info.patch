From 5d10876307a8499deea12de08ca5bbf7e5fdde7e Mon Sep 17 00:00:00 2001
From: Daniel Stodden <daniel.stodden@citrix.com>
Date: Tue, 8 Mar 2011 13:48:34 -0800
Subject: [PATCH 05/11] blktap: Add physical sector device info.

Misaligned access wrt to physical block size is a major performance
killer. Alignment offsets is for devices which are 'naturally
misaligned', e.g. to compensate for stuff like DOS 63S/track
partitioning. Accept a BLKTAP_DEVICE_FLAG_PSZ here, and expect
userspace to figure out the physical details.

Signed-off-by: Daniel Stodden <daniel.stodden@citrix.com>
---
 drivers/block/blktap/device.c |   33 +++++++++++++++++++++++++++++----
 drivers/block/blktap/ring.c   |    4 ++++
 include/linux/blktap.h        |    3 +++
 3 files changed, 36 insertions(+), 4 deletions(-)

diff --git a/drivers/block/blktap/device.c b/drivers/block/blktap/device.c
index 863611b..c6c0aac 100644
--- a/drivers/block/blktap/device.c
+++ b/drivers/block/blktap/device.c
@@ -286,10 +286,13 @@ blktap_device_configure(struct blktap *tap,
 	set_capacity(gd, info->capacity);
 	set_disk_ro(gd, !!(info->flags & BLKTAP_DEVICE_FLAG_RO));
 
-	/* Hard sector size and max sectors impersonate the equiv. hardware. */
 	blk_queue_logical_block_size(rq, info->sector_size);
 	blk_queue_max_sectors(rq, 512);
 
+	/* Hard sector size and alignment in hardware */
+	blk_queue_physical_block_size(rq, info->phys_block_size);
+	blk_queue_alignment_offset(rq, info->phys_block_offset);
+
 	/* Each segment in a request is up to an aligned page in size. */
 	blk_queue_segment_boundary(rq, PAGE_SIZE - 1);
 	blk_queue_max_segment_size(rq, PAGE_SIZE);
@@ -321,11 +324,31 @@ blktap_device_validate_info(struct blktap *tap,
 	    info->capacity > ULLONG_MAX >> ilog2(info->sector_size))
 		goto fail;
 
+	/* physical blocks default to logical ones */
+	if (!(info->flags & BLKTAP_DEVICE_FLAG_PSZ)) {
+		info->phys_block_size   = info->sector_size;
+		info->phys_block_offset = 0;
+	}
+
+	/* phys block size is 2^n and >= logical */
+	if (info->phys_block_size < info->sector_size ||
+	    !is_power_of_2(info->phys_block_size))
+		goto fail;
+
+	/* alignment offset < physical/logical */
+	if (info->phys_block_offset % info->sector_size ||
+	    info->phys_block_offset >= info->phys_block_size)
+		goto fail;
+
 	return 0;
 
 fail:
-	dev_err(dev, "capacity: %llu, sector-size: %u\n",
-		info->capacity, info->sector_size);
+	dev_err(dev,
+		"capacity: %llu, sector-size: %u/%u+%u, "
+		"flags: %#lx"
+		info->capacity, info->sector_size,
+		info->phys_block_size, info->phys_block_offset,
+		info->flags);
 	return -EINVAL;
 }
 
@@ -473,9 +496,11 @@ blktap_device_create(struct blktap *tap, struct blktap_device_info *info)
 
 	set_bit(BLKTAP_DEVICE, &tap->dev_inuse);
 
-	dev_info(disk_to_dev(gd), "sector-size: %u/%u capacity: %llu\n",
+	dev_info(disk_to_dev(gd),
+		 "sector-size: %u/%u+%u capacity: %llu\n"
 		 queue_logical_block_size(rq),
 		 queue_physical_block_size(rq),
+		 queue_alignment_offset(rq),
 		 (unsigned long long)get_capacity(gd));
 
 	return 0;
diff --git a/drivers/block/blktap/ring.c b/drivers/block/blktap/ring.c
index 71cbeba..e4c5c27 100644
--- a/drivers/block/blktap/ring.c
+++ b/drivers/block/blktap/ring.c
@@ -446,6 +446,7 @@ blktap_ring_ioctl(struct inode *inode, struct file *filp,
 		size_t base_sz, sz;
 
 		mask  = BLKTAP_DEVICE_FLAG_RO;
+		mask |= BLKTAP_DEVICE_FLAG_PSZ;
 
 		memset(&info, 0, sizeof(info));
 		sz = base_sz = BLKTAP_INFO_SIZE_AT(flags);
@@ -453,6 +454,9 @@ blktap_ring_ioctl(struct inode *inode, struct file *filp,
 		if (copy_from_user(&info, ptr, sz))
 			return -EFAULT;
 
+		if ((info.flags & BLKTAP_DEVICE_FLAG_PSZ) != 0)
+			sz = BLKTAP_INFO_SIZE_AT(phys_block_offset);
+
 		if (sz > base_sz)
 			if (copy_from_user(&info, ptr, sz))
 				return -EFAULT;
diff --git a/include/linux/blktap.h b/include/linux/blktap.h
index 0c909e9..7afc802 100644
--- a/include/linux/blktap.h
+++ b/include/linux/blktap.h
@@ -17,6 +17,7 @@
 #define BLKTAP_IOCTL_REMOVE_DEVICE  207
 
 #define BLKTAP_DEVICE_FLAG_RO       0x00000001UL /* disk is R/O */
+#define BLKTAP_DEVICE_FLAG_PSZ      0x00000002UL /* physical sector size */
 
 struct blktap_info {
 	unsigned int            ring_major;
@@ -28,6 +29,8 @@ struct blktap_device_info {
 	unsigned long long      capacity;
 	unsigned int            sector_size;
 	unsigned long           flags;
+	unsigned int            phys_block_size;
+	unsigned int            phys_block_offset;
 };
 
 /*
-- 
1.7.4.1

