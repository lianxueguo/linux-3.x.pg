From 7ef4e356a7dd41cd0ed8d005646c8c9eb5703189 Mon Sep 17 00:00:00 2001
From: Daniel Stodden <daniel.stodden@citrix.com>
Date: Tue, 15 Mar 2011 03:38:42 -0700
Subject: [PATCH 09/11] blktap: Forward port to 2.6.36

 - New ring and control ioctl fops.
 - No prepare_flush_fn, take REQ_FLUSH requests instead.
 - Replace most type check macros with flag tests.
 - Fix queue limits setup.

Signed-off-by: Daniel Stodden <daniel.stodden@citrix.com>
---
 drivers/block/blktap/control.c |    8 ++++----
 drivers/block/blktap/device.c  |   35 ++++++++++++-----------------------
 drivers/block/blktap/ring.c    |   16 ++++++++--------
 drivers/block/blktap/sysfs.c   |   12 +++++++++---
 4 files changed, 33 insertions(+), 38 deletions(-)

diff --git a/drivers/block/blktap/control.c b/drivers/block/blktap/control.c
index 9294a13..928fcdc 100644
--- a/drivers/block/blktap/control.c
+++ b/drivers/block/blktap/control.c
@@ -121,8 +121,8 @@ blktap_control_destroy_tap(struct blktap *tap)
 	return 0;
 }
 
-static int
-blktap_control_ioctl(struct inode *inode, struct file *filp,
+static long
+blktap_control_ioctl(struct file *filp,
 		     unsigned int cmd, unsigned long arg)
 {
 	struct blktap *tap;
@@ -166,8 +166,8 @@ blktap_control_ioctl(struct inode *inode, struct file *filp,
 }
 
 static struct file_operations blktap_control_file_operations = {
-	.owner    = THIS_MODULE,
-	.ioctl    = blktap_control_ioctl,
+	.owner          = THIS_MODULE,
+	.unlocked_ioctl = blktap_control_ioctl,
 };
 
 static struct miscdevice blktap_control = {
diff --git a/drivers/block/blktap/device.c b/drivers/block/blktap/device.c
index 585a27b..537673e6 100644
--- a/drivers/block/blktap/device.c
+++ b/drivers/block/blktap/device.c
@@ -162,15 +162,6 @@ blktap_device_end_request(struct blktap *tap,
 	blktap_end_rq(rq, error);
 }
 
-static void
-blktap_device_prepare_flush(struct request_queue *q, struct request *rq)
-{
-	rq->cmd_type = REQ_TYPE_BLOCK_PC;
-	rq->timeout  = q->rq_timeout;
-	rq->cmd[0]   = BLKTAP_OP_FLUSH;
-	rq->cmd_len  = 1;
-}
-
 int
 blktap_device_make_request(struct blktap *tap, struct request *rq)
 {
@@ -190,18 +181,18 @@ blktap_device_make_request(struct blktap *tap, struct request *rq)
 		goto fail;
 	}
 
-	if (blk_pc_request(rq)) {
-		request->operation = rq->cmd[0];
-		request->nr_pages  = 0;
-		goto submit;
-	}
-
-	if (!blk_fs_request(rq)) {
+	if (rq->cmd_type != REQ_TYPE_FS) {
 		err = -EOPNOTSUPP;
 		goto fail;
 	}
 
-	if (blk_discard_rq(rq)) {
+	if (rq->cmd_flags & REQ_FLUSH) {
+		request->operation = BLKTAP_OP_FLUSH;
+		request->nr_pages  = 0;
+		goto submit;
+	}
+
+	if (rq->cmd_flags & REQ_DISCARD) {
 		request->operation = BLKTAP_OP_TRIM;
 		request->nr_pages  = 0;
 		goto submit;
@@ -310,7 +301,6 @@ blktap_device_configure(struct blktap *tap,
 	set_disk_ro(gd, !!(info->flags & BLKTAP_DEVICE_FLAG_RO));
 
 	blk_queue_logical_block_size(rq, info->sector_size);
-	blk_queue_max_sectors(rq, 512);
 
 	/* Hard sector size and alignment in hardware */
 	blk_queue_physical_block_size(rq, info->phys_block_size);
@@ -321,18 +311,17 @@ blktap_device_configure(struct blktap *tap,
 	blk_queue_max_segment_size(rq, PAGE_SIZE);
 
 	/* Ensure a merged request will fit in a single I/O ring slot. */
-	blk_queue_max_phys_segments(rq, BLKTAP_SEGMENT_MAX);
-	blk_queue_max_hw_segments(rq, BLKTAP_SEGMENT_MAX);
+	blk_queue_max_segments(rq, BLKTAP_SEGMENT_MAX);
+	blk_queue_max_segment_size(rq, PAGE_SIZE);
 
 	/* Make sure buffer addresses are sector-aligned. */
 	blk_queue_dma_alignment(rq, 511);
 
 	/* Enable cache control */
 	if (info->flags & BLKTAP_DEVICE_FLAG_FLUSH)
-		blk_queue_ordered(rq, QUEUE_ORDERED_DRAIN_FLUSH,
-				  blktap_device_prepare_flush);
+		blk_queue_ordered(rq, QUEUE_ORDERED_DRAIN_FLUSH);
 	else
-		blk_queue_ordered(rq, QUEUE_ORDERED_DRAIN, NULL);
+		blk_queue_ordered(rq, QUEUE_ORDERED_DRAIN);
 
 	/* Block discards */
 	if (info->flags & BLKTAP_DEVICE_FLAG_TRIM) {
diff --git a/drivers/block/blktap/ring.c b/drivers/block/blktap/ring.c
index bbe8730..eb2805e 100644
--- a/drivers/block/blktap/ring.c
+++ b/drivers/block/blktap/ring.c
@@ -422,8 +422,8 @@ fail:
 	return err;
 }
 
-static int
-blktap_ring_ioctl(struct inode *inode, struct file *filp,
+static long
+blktap_ring_ioctl(struct file *filp,
 		  unsigned int cmd, unsigned long arg)
 {
 	struct blktap *tap = filp->private_data;
@@ -533,12 +533,12 @@ static unsigned int blktap_ring_poll(struct file *filp, poll_table *wait)
 }
 
 static struct file_operations blktap_ring_file_operations = {
-	.owner    = THIS_MODULE,
-	.open     = blktap_ring_open,
-	.release  = blktap_ring_release,
-	.ioctl    = blktap_ring_ioctl,
-	.mmap     = blktap_ring_mmap,
-	.poll     = blktap_ring_poll,
+	.owner          = THIS_MODULE,
+	.open           = blktap_ring_open,
+	.release        = blktap_ring_release,
+	.unlocked_ioctl = blktap_ring_ioctl,
+	.mmap           = blktap_ring_mmap,
+	.poll           = blktap_ring_poll,
 };
 
 void
diff --git a/drivers/block/blktap/sysfs.c b/drivers/block/blktap/sysfs.c
index ca331ee..5edee06 100644
--- a/drivers/block/blktap/sysfs.c
+++ b/drivers/block/blktap/sysfs.c
@@ -213,13 +213,17 @@ blktap_sysfs_destroy(struct blktap *tap)
 }
 
 static ssize_t
-blktap_sysfs_show_verbosity(struct class *class, char *buf)
+blktap_sysfs_show_verbosity(struct class *class,
+			    struct class_attribute *attr,
+			    char *buf)
 {
 	return sprintf(buf, "%d\n", blktap_debug_level);
 }
 
 static ssize_t
-blktap_sysfs_set_verbosity(struct class *class, const char *buf, size_t size)
+blktap_sysfs_set_verbosity(struct class *class,
+			   struct class_attribute *attr,
+			   const char *buf, size_t size)
 {
 	int level;
 
@@ -234,7 +238,9 @@ static CLASS_ATTR(verbosity, S_IRUGO|S_IWUSR,
 		  blktap_sysfs_show_verbosity, blktap_sysfs_set_verbosity);
 
 static ssize_t
-blktap_sysfs_show_devices(struct class *class, char *buf)
+blktap_sysfs_show_devices(struct class *class,
+			  struct class_attribute *attr,
+			  char *buf)
 {
 	int i, ret;
 	struct blktap *tap;
-- 
1.7.4.1

