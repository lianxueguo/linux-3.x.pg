From: Jan Klos <honza.klos@gmail.com>
Date: Sun, 6 Oct 2013 21:08:20 +0200
Subject: cifs: Fix inability to write files >2GB to SMB2/3 shares

commit 2f6c9479633780ba4a3484bba7eba5a721a5cf20 upstream.

When connecting to SMB2/3 shares, maximum file size is set to non-LFS maximum 
in superblock. This is due to cap_large_files bit being different for SMB1 
and SMB2/3 (where it is just an internal flag that is not negotiated and the 
SMB1 one corresponds to multichannel capability, so maybe LFS works correctly 
if server sends 0x08 flag) while capabilities are checked always for the SMB1 
bit in cifs_read_super().

The patch fixes this by checking for the correct bit according to the protocol 
version.

CC: Stable <stable@kernel.org>
Signed-off-by: Jan Klos <honza.klos@gmail.com>
Reviewed-by: Jeff Layton <jlayton@redhat.com>
Signed-off-by: Steve French <smfrench@gmail.com>

---
 fs/cifs/cifsfs.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

--
1.8.1.2

diff --git a/fs/cifs/cifsfs.c b/fs/cifs/cifsfs.c
index b9db388..e946529 100644
--- a/fs/cifs/cifsfs.c
+++ b/fs/cifs/cifsfs.c
@@ -120,14 +120,16 @@ cifs_read_super(struct super_block *sb)
 {
 	struct inode *inode;
 	struct cifs_sb_info *cifs_sb;
+	struct cifs_tcon *tcon;
 	int rc = 0;

 	cifs_sb = CIFS_SB(sb);
+	tcon = cifs_sb_master_tcon(cifs_sb);

 	if (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_POSIXACL)
 		sb->s_flags |= MS_POSIXACL;

-	if (cifs_sb_master_tcon(cifs_sb)->ses->capabilities & CAP_LARGE_FILES)
+	if (tcon->ses->capabilities & tcon->ses->server->vals->cap_large_files)
 		sb->s_maxbytes = MAX_LFS_FILESIZE;
 	else
 		sb->s_maxbytes = MAX_NON_LFS;
@@ -154,7 +156,7 @@ cifs_read_super(struct super_block *sb)
 	}

 	/* do that *after* d_make_root() - we want NULL ->d_op for root here */
-	if (cifs_sb_master_tcon(cifs_sb)->nocase)
+	if (tcon->nocase)
 		sb->s_d_op = &cifs_ci_dentry_ops;
 	else
 		sb->s_d_op = &cifs_dentry_ops;
