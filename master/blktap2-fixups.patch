diff --git a/drivers/block/Kconfig b/drivers/block/Kconfig
index b81ddfe..97deaca 100644
--- a/drivers/block/Kconfig
+++ b/drivers/block/Kconfig
@@ -541,4 +541,13 @@ config BLK_DEV_RSXX
 	  To compile this driver as a module, choose M here: the
 	  module will be called rsxx.
 
+config BLK_DEV_TAP
+       tristate "Blktap userspace devices"
+       help
+         The block tap driver allows block device requests to be
+         redirected to processes, through a device interface.
+         Doing so allows user-space development of high-performance
+         block storage backends, where disk images may be implemented
+         as files, in memory, or on other hosts across the network.
+
 endif # BLK_DEV
diff --git a/drivers/block/Makefile b/drivers/block/Makefile
index ca07399..ab7db8c 100644
--- a/drivers/block/Makefile
+++ b/drivers/block/Makefile
@@ -44,3 +44,5 @@ obj-$(CONFIG_BLK_DEV_RSXX) += rsxx/
 
 nvme-y		:= nvme-core.o nvme-scsi.o
 swim_mod-y	:= swim.o swim_asm.o
+
+obj-$(CONFIG_BLK_DEV_TAP)	+= blktap2/
diff --git a/drivers/block/blktap2/Makefile b/drivers/block/blktap2/Makefile
index 80a5be9..6ea05a9 100644
--- a/drivers/block/blktap2/Makefile
+++ b/drivers/block/blktap2/Makefile
@@ -1,8 +1,7 @@
-obj-$(CONFIG_XEN_BLKDEV_TAP) := blktap.o
+obj-$(CONFIG_BLK_DEV_TAP) := blktap.o
 
 blktap-objs := control.o
 blktap-objs += ring.o
 blktap-objs += device.o
 blktap-objs += request.o
 blktap-objs += sysfs.o
-blktap-objs += ioctx.o
diff --git a/drivers/block/blktap2/blktap.h b/drivers/block/blktap2/blktap.h
index bb8d2d2..591bc88 100644
--- a/drivers/block/blktap2/blktap.h
+++ b/drivers/block/blktap2/blktap.h
@@ -24,8 +24,7 @@ extern int blktap_device_major;
 #define BTWARN(_f, _a...)            BTPRINTK(0, KERN_WARNING, 0, _f, ##_a)
 #define BTERR(_f, _a...)             BTPRINTK(0, KERN_ERR, 0, _f, ##_a)
 
-#define MAX_BLKTAP_DEVICE            1024
-
+#define MAX_BLKTAP_DEVICE            2048
 #define BLKTAP_DEVICE                4
 #define BLKTAP_DEVICE_CLOSED         5
 #define BLKTAP_SHUTDOWN_REQUESTED    8
@@ -46,7 +45,7 @@ struct blktap_ring {
 	struct task_struct            *task;
 
 	struct vm_area_struct         *vma;
-	blktap_front_ring_t            ring;
+	struct blktap_front_ring       ring;
 	unsigned long                  ring_vstart;
 	unsigned long                  user_vstart;
 
diff --git a/drivers/block/blktap2/control.c b/drivers/block/blktap2/control.c
index fa7042b..b35e1a7 100644
--- a/drivers/block/blktap2/control.c
+++ b/drivers/block/blktap2/control.c
@@ -2,6 +2,7 @@
 #include <linux/sched.h>
 #include <linux/miscdevice.h>
 #include <linux/device.h>
+#include <linux/slab.h>
 #include <asm/uaccess.h>
 
 #include "blktap.h"
@@ -123,9 +124,9 @@ blktap_control_destroy_tap(struct blktap *tap)
 	return 0;
 }
 
-static int
-blktap_control_ioctl(struct inode *inode, struct file *filp,
-		     unsigned int cmd, unsigned long arg)
+static long
+__blktap_control_ioctl(struct file *filp,
+		       unsigned int cmd, unsigned long arg)
 {
 	struct blktap *tap;
 
@@ -167,9 +168,24 @@ blktap_control_ioctl(struct inode *inode, struct file *filp,
 	return -ENOIOCTLCMD;
 }
 
+static DEFINE_MUTEX(blktap_control_ioctl_mutex);
+
+static long
+blktap_control_ioctl(struct file *filp,
+		     unsigned int cmd, unsigned long arg)
+{
+	int ret;
+
+	mutex_lock(&blktap_control_ioctl_mutex);
+	ret = __blktap_control_ioctl(filp, cmd, arg);
+	mutex_unlock(&blktap_control_ioctl_mutex);
+
+	return ret;
+}
+
 static struct file_operations blktap_control_file_operations = {
-	.owner    = THIS_MODULE,
-	.ioctl    = blktap_control_ioctl,
+	.owner          = THIS_MODULE,
+	.unlocked_ioctl = blktap_control_ioctl,
 };
 
 static struct miscdevice blktap_control = {
diff --git a/drivers/block/blktap2/device.c b/drivers/block/blktap2/device.c
index e88f729..0ed5e30 100644
--- a/drivers/block/blktap2/device.c
+++ b/drivers/block/blktap2/device.c
@@ -4,6 +4,7 @@
 #include <linux/hdreg.h>
 #include <scsi/scsi.h>
 #include <scsi/scsi_ioctl.h>
+#include <linux/module.h>
 
 #include "blktap.h"
 
@@ -288,7 +289,7 @@ blktap_device_run_queue(struct blktap *tap)
 		if (!rq)
 			break;
 
-		if (!blk_fs_request(rq)) {
+		if (rq->cmd_type != REQ_TYPE_FS) {
 			__blktap_end_queued_rq(rq, -EOPNOTSUPP);
 			continue;
 		}
@@ -337,21 +338,17 @@ blktap_device_configure(struct blktap *tap,
 	/* Hard sector size and max sectors impersonate the equiv. hardware. */
 	blk_queue_logical_block_size(rq, info->sector_size);
 	blk_queue_physical_block_size(rq, info->physical_sector_size);
-	blk_queue_max_sectors(rq, 512);
+	blk_queue_max_hw_sectors(rq, 512);
 
 	/* Each segment in a request is up to an aligned page in size. */
 	blk_queue_segment_boundary(rq, PAGE_SIZE - 1);
 	blk_queue_max_segment_size(rq, PAGE_SIZE);
 
 	/* Ensure a merged request will fit in a single I/O ring slot. */
-	blk_queue_max_phys_segments(rq, BLKTAP_SEGMENT_MAX);
-	blk_queue_max_hw_segments(rq, BLKTAP_SEGMENT_MAX);
+	blk_queue_max_segments(rq, BLKTAP_SEGMENT_MAX);
 
 	/* Make sure buffer addresses are sector-aligned. */
 	blk_queue_dma_alignment(rq, 511);
-
-	/* We are reordering, but cacheless. */
-	blk_queue_ordered(rq, QUEUE_ORDERED_DRAIN, NULL);
 }
 
 static int
@@ -431,8 +428,6 @@ __blktap_device_destroy(struct blktap *tap)
 
 	blk_cleanup_queue(gd->queue);
 
-	blktap_ioctx_detach(tap);
-
 	put_disk(gd);
 	tapdev->gd = NULL;
 
@@ -550,11 +545,7 @@ __blktap_device_create(struct blktap *tap, struct blktap_device_info *info)
 		err = -ENOMEM;
 		goto fail;
 	}
-
-	err = blktap_ioctx_attach(tap, rq->node);
-	if (err)
-		goto fail;
-
+ 
 	elevator_init(rq, "noop");
 
 	gd->queue     = rq;
@@ -574,8 +565,6 @@ __blktap_device_create(struct blktap *tap, struct blktap_device_info *info)
 	return 0;
 
 fail:
-	blktap_ioctx_detach(tap);
-
 	if (gd)
 		del_gendisk(gd);
 	if (rq)
@@ -615,10 +604,9 @@ blktap_device_debug(struct blktap *tap, char *buf, size_t size)
 		      get_capacity(disk), queue_logical_block_size(q));
 
 	s += snprintf(s, end - s,
-		      "queue flags:%#lx plugged:%d stopped:%d empty:%d\n",
+		      "queue flags:%#lx stopped:%d\n",
 		      q->queue_flags,
-		      blk_queue_plugged(q), blk_queue_stopped(q),
-		      elv_queue_empty(q));
+		      blk_queue_stopped(q));
 
 	bdev = bdget_disk(disk, 0);
 	if (bdev) {
diff --git a/drivers/block/blktap2/ioctx.c b/drivers/block/blktap2/ioctx.c
deleted file mode 100644
index 2d829ec..0000000
--- a/drivers/block/blktap2/ioctx.c
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Copyright (c) 2010 Citrix Systems, Inc.
- */
-
-#include <linux/bio.h>
-#include <linux/iocontext.h>
-
-#include "blktap.h"
-
-void
-blktap_ioctx_detach(struct blktap *tap)
-{
-	struct special_io_context *sioc;
-	struct io_context *ioc;
-
-	ioc  = tap->ioc;
-	if (!ioc)
-		return;
-
-	sioc = ioc->special;
-	if (sioc && atomic_dec_and_test(&sioc->refs)) {
-		bioset_free(sioc->bs);
-		kfree(sioc);
-		ioc->special = NULL;
-	}
-
-	put_io_context(ioc);
-	tap->ioc = NULL;
-}
-
-int
-blktap_ioctx_attach(struct blktap *tap, int node)
-{
-	struct special_io_context *sioc;
-	struct io_context *ioc;
-	int err;
-
-	err = -ENOMEM;
-
-	ioc = tap->ioc = get_io_context(GFP_KERNEL, node);
-	if (!ioc)
-		goto fail;
-
-	sioc = ioc->special;
-	if (sioc)
-		goto out;
-
-	sioc = kzalloc_node(sizeof(*sioc), GFP_KERNEL, node);
-	if (!sioc)
-		goto fail;
-
-	ioc->special = sioc;
-
-	/* NB. multi-vbd count. */
-	atomic_set(&sioc->refs, 0);
-
-	/* NB. one warning per task and minute. */
-	sioc->rs.interval = 60 * HZ;
-	sioc->rs.burst    = 1;
-
-	sioc->bs = bioset_create(BLKTAP_BIO_POOL_SIZE, 0);
-	if (!sioc->bs)
-		goto fail;
-
-out:
-	atomic_inc(&sioc->refs);
-	return 0;
-
-fail:
-	blktap_ioctx_detach(tap);
-	return err;
-}
diff --git a/drivers/block/blktap2/request.c b/drivers/block/blktap2/request.c
index 03bbb56..f17c673 100644
--- a/drivers/block/blktap2/request.c
+++ b/drivers/block/blktap2/request.c
@@ -3,6 +3,7 @@
 #include <linux/mutex.h>
 #include <linux/sched.h>
 #include <linux/device.h>
+#include <linux/slab.h>
 
 #include "blktap.h"
 
diff --git a/drivers/block/blktap2/ring.c b/drivers/block/blktap2/ring.c
index 5295eaf..8dc7efb 100644
--- a/drivers/block/blktap2/ring.c
+++ b/drivers/block/blktap2/ring.c
@@ -4,6 +4,7 @@
 #include <linux/sched.h>
 #include <linux/poll.h>
 #include <linux/blkdev.h>
+#include <linux/module.h>
 
 #include "blktap.h"
 
@@ -324,7 +325,7 @@ blktap_ring_mmap(struct file *filp, struct vm_area_struct *vma)
 {
 	struct blktap *tap = filp->private_data;
 	struct blktap_ring *ring = &tap->ring;
-	blktap_sring_t *sring;
+	struct blktap_sring *sring;
 	struct page *page = NULL;
 	int err;
 
@@ -350,8 +351,7 @@ blktap_ring_mmap(struct file *filp, struct vm_area_struct *vma)
 
 	vma->vm_private_data = tap;
 
-	vma->vm_flags |= VM_DONTCOPY;
-	vma->vm_flags |= VM_RESERVED;
+	vma->vm_flags |= VM_DONTCOPY | VM_DONTEXPAND | VM_DONTDUMP;
 
 	vma->vm_ops = &blktap_ring_vm_operations;
 
@@ -465,7 +465,6 @@ static unsigned int blktap_ring_poll(struct file *filp, poll_table *wait)
 	RING_PUSH_REQUESTS(&ring->ring);
 
 	if (work ||
-	    ring->ring.sring->private.tapif_user.msg ||
 	    test_and_clear_bit(BLKTAP_DEVICE_CLOSED, &tap->dev_inuse))
 		return POLLIN | POLLRDNORM;
 
diff --git a/drivers/block/blktap2/sysfs.c b/drivers/block/blktap2/sysfs.c
index 4cbb0ce..626350b1 100644
--- a/drivers/block/blktap2/sysfs.c
+++ b/drivers/block/blktap2/sysfs.c
@@ -51,48 +51,7 @@ blktap_sysfs_get_name(struct device *dev, struct device_attribute *attr, char *b
 static DEVICE_ATTR(name, S_IRUGO|S_IWUSR,
 		   blktap_sysfs_get_name, blktap_sysfs_set_name);
 
-static void
-blktap_sysfs_remove_work(struct work_struct *work)
-{
-	struct blktap *tap
-		= container_of(work, struct blktap, remove_work);
-	blktap_control_destroy_tap(tap);
-}
-
-static ssize_t
-blktap_sysfs_remove_device(struct device *dev,
-			   struct device_attribute *attr,
-			   const char *buf, size_t size)
-{
-	struct blktap *tap;
-	int err;
-
-	tap = dev_get_drvdata(dev);
-	if (!tap)
-		return size;
-
-	if (test_and_set_bit(BLKTAP_SHUTDOWN_REQUESTED, &tap->dev_inuse))
-		goto wait;
-
-	if (tap->ring.vma) {
-		blktap_sring_t *sring = tap->ring.ring.sring;
-		sring->private.tapif_user.msg = BLKTAP_RING_MESSAGE_CLOSE;
-		blktap_ring_kick_user(tap);
-	} else {
-		INIT_WORK(&tap->remove_work, blktap_sysfs_remove_work);
-		schedule_work(&tap->remove_work);
-	}
-wait:
-	err = wait_event_interruptible(tap->remove_wait,
-				       !dev_get_drvdata(dev));
-	if (err)
-		return err;
-
-	return size;
-}
-static DEVICE_ATTR(remove, S_IWUSR, NULL, blktap_sysfs_remove_device);
-
-static ssize_t
+static ssize_t 
 blktap_sysfs_debug_device(struct device *dev, struct device_attribute *attr, char *buf)
 {
 	struct blktap *tap;
@@ -170,8 +129,6 @@ blktap_sysfs_create(struct blktap *tap)
 	struct device *dev;
 	int err = 0;
 
-	init_waitqueue_head(&tap->remove_wait);
-
 	dev = device_create(class, NULL, ring->devno,
 			    tap, "blktap%d", tap->minor);
 	if (IS_ERR(dev))
@@ -179,8 +136,6 @@ blktap_sysfs_create(struct blktap *tap)
 	if (!err)
 		err = device_create_file(dev, &dev_attr_name);
 	if (!err)
-		err = device_create_file(dev, &dev_attr_remove);
-	if (!err)
 		err = device_create_file(dev, &dev_attr_debug);
 	if (!err)
 		err = device_create_file(dev, &dev_attr_task);
@@ -206,20 +161,20 @@ blktap_sysfs_destroy(struct blktap *tap)
 		return;
 
 	dev_set_drvdata(dev, NULL);
-	wake_up(&tap->remove_wait);
-
 	device_unregister(dev);
 	ring->dev = NULL;
 }
 
 static ssize_t
-blktap_sysfs_show_verbosity(struct class *class, char *buf)
+blktap_sysfs_show_verbosity(struct class *class, struct class_attribute *attr, 
+			    char *buf)
 {
 	return sprintf(buf, "%d\n", blktap_debug_level);
 }
 
 static ssize_t
-blktap_sysfs_set_verbosity(struct class *class, const char *buf, size_t size)
+blktap_sysfs_set_verbosity(struct class *class, struct class_attribute *attr,
+			   const char *buf, size_t size)
 {
 	int level;
 
@@ -234,7 +189,8 @@ static CLASS_ATTR(verbosity, S_IRUGO|S_IWUSR,
 		  blktap_sysfs_show_verbosity, blktap_sysfs_set_verbosity);
 
 static ssize_t
-blktap_sysfs_show_devices(struct class *class, char *buf)
+blktap_sysfs_show_devices(struct class *class, struct class_attribute *attr, 
+			  char *buf)
 {
 	int i, ret;
 	struct blktap *tap;
diff --git a/include/uapi/linux/Kbuild b/include/uapi/linux/Kbuild
index bdc6e87..5a32e88 100644
--- a/include/uapi/linux/Kbuild
+++ b/include/uapi/linux/Kbuild
@@ -65,6 +65,7 @@ header-y += baycom.h
 header-y += bfs_fs.h
 header-y += binfmts.h
 header-y += blkpg.h
+header-y += blktap.h
 header-y += blktrace_api.h
 header-y += bpqether.h
 header-y += bsg.h
