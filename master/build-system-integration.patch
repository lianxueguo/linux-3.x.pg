Convert to GIT

From: Frediano Ziglio <frediano.ziglio@citrix.com>

Use GIT macros instead of HG ones

diff --git a/mk/Makefile b/mk/Makefile
new file mode 100644
index 0000000..1e95249
--- /dev/null
+++ b/mk/Makefile
@@ -0,0 +1,172 @@
+USE_BRANDING := yes
+IMPORT_BRANDING := yes
+REPONAME=linux-3.x
+include /b/common.mk
+include /b/rpmbuild.mk
+
+RPM_BUILT_COOKIE  = $(MY_OBJ_DIR)/.pvops_rpm_built_cookie
+FILES_COOKIE      = $(MY_OBJ_DIR)/.files.cookie
+REPO              = $(call git_loc,$(REPONAME))
+REPOSTAMP         = $(call git_req,$(REPONAME))
+
+-include $(MY_OBJ_DIR)/pvops_version.inc
+$(MY_OBJ_DIR)/pvops_version.inc: $(REPOSTAMP)
+	$(call version-makefile) > $@
+	awk -F. '{ print "REPO_VERSION=" $$0; }' \
+		< $(REPOSTAMP) >> $@
+	awk '/(^VERSION)|(^PATCHLEVEL)|(^SUBLEVEL)|(^EXTRAVERSION)|(^STABLE_SUBLEVEL)/ { print "KERNEL_"$$_ }' ../Makefile >> $@
+	echo LINUX_KABI_VERSION := '$$(KERNEL_VERSION).$$(KERNEL_PATCHLEVEL).$$(KERNEL_SUBLEVEL)$$(KERNEL_EXTRAVERSION)' >> $@
+	$(call git_cset_number,$(REPONAME)) >> $@
+	echo XS_RELEASE := '$$(CSET_NUMBER)' >> $@
+
+# RPM package Version and Release.
+PKG_VERSION := $(KERNEL_VERSION).$(KERNEL_PATCHLEVEL).$(KERNEL_STABLE_SUBLEVEL)
+PKG_RELEASE := $(XS_RELEASE)
+ARCHS := $(DOMAIN0_ARCH_OPTIMIZED)
+
+SOURCES = $(RPM_SOURCESDIR)/linux-$(PKG_VERSION)-$(PKG_RELEASE).tar.bz2 \
+	  $(ARCHS:%=$(RPM_SOURCESDIR)/kernel-%.config) \
+          $(RPM_SPECSDIR)/kernel.spec
+
+SRPM = $(RPM_SRPMSDIR)/kernel-$(PKG_VERSION)-$(PKG_RELEASE).src.rpm
+
+.PHONY: build
+build: $(RPM_BUILT_COOKIE) $(FILES_COOKIE) $(MY_OUTPUT_DIR)/kernel.inc $(BRANDING) $(MY_SOURCES)/MANIFEST check-kernel-abi
+	@ :
+
+.PHONY: clean
+clean:
+	rm -f $(RPM_BUILT_COOKIE)
+	rm -f $(SOURCES)
+	rm -f $(SRPM)
+	-rm -f $(MY_OBJ_DIR)/version.inc
+	$(call component_clean,$(COMPONENT))
+
+$(RPM_SOURCESDIR)/linux-$(PKG_VERSION)-$(PKG_RELEASE).tar.bz2: $(RPM_DIRECTORIES)
+	set -e -o pipefail; cd $(call git_loc,$(REPONAME)) && git archive --prefix=linux-$(PKG_VERSION)/ HEAD | bzip2 -c > $@.tmp
+	mv -f $@.tmp $@
+
+$(RPM_SOURCESDIR)/kernel-i686.config: ../buildconfigs/linux-defconfig_xen_x86_32 $(RPM_DIRECTORIES)
+	cp -f $< $@
+
+$(RPM_SOURCESDIR)/kernel-x86_64.config: ../buildconfigs/linux-defconfig_xen_x86_64 $(RPM_DIRECTORIES)
+	cp -f $< $@
+
+$(RPM_SPECSDIR)/kernel.spec: kernel.spec.in $(RPM_DIRECTORIES)
+	echo "Version: $(PKG_VERSION) Release: $(PKG_RELEASE)"; \
+	$(call brand,kernel.spec.in) | \
+	sed -e s\,@REPO_VERSION@,$(REPO_VERSION),g   \
+	    -e s\,@LINUX_KABI_VERSION@,$(LINUX_KABI_VERSION),g \
+	    -e s\,@XS_RELEASE@,$(XS_RELEASE),g       \
+	    -e s\,@PKG_VERSION@,$(PKG_VERSION),g    \
+	    -e s\,@PKG_RELEASE@,$(PKG_RELEASE),g    \
+	> $@
+
+$(SRPM): $(SOURCES)
+	mkdir -p $(RPM_SRPMSDIR)
+	$(RPMBUILD) -bs $(RPM_SPECSDIR)/kernel.spec
+
+$(RPM_BUILT_COOKIE): $(RPM_DIRECTORIES) $(SRPM)
+	for arch in $(ARCHS); do \
+		$(RPMBUILD) --target $$arch --rebuild $(SRPM); \
+	done
+	@touch $@
+
+kernel_rpm = kernel$(1)-$(PKG_VERSION)-$(PKG_RELEASE).$(DOMAIN0_ARCH_OPTIMIZED).rpm
+
+OUTPUT_RPM = $(call kernel_rpm)
+OUTPUT_DEBUG_RPM = $(call kernel_rpm,-debuginfo)
+OUTPUT_DEVEL_RPM = $(call kernel_rpm,-devel)
+
+VMLINUX_PATH := /usr/lib/debug/lib/modules/$(LINUX_KABI_VERSION)/vmlinux
+
+$(FILES_COOKIE): $(RPM_BUILT_COOKIE) $(MY_INSTALLER_FILES)/.dirstamp $(MY_MAIN_CDFILES)/.dirstamp
+	mkdir -p $(MY_INSTALLER_FILES)
+	rpm2cpio $(MY_OUTPUT_DIR)/RPMS/$(DOMAIN0_ARCH_OPTIMIZED)/$(OUTPUT_RPM) | ( cd $(MY_INSTALLER_FILES) ; cpio -id )
+
+	mkdir -p $(MY_MAIN_CDFILES)/boot/
+	mv $(MY_INSTALLER_FILES)/boot/vmlinuz-$(LINUX_KABI_VERSION) $(MY_MAIN_CDFILES)/boot/vmlinuz
+
+#
+# The install-image component requires a gzipped, stripped vmlinux
+# file to build some of the more esoteric installers.
+#
+	rpm2cpio $(MY_OUTPUT_DIR)/RPMS/$(DOMAIN0_ARCH_OPTIMIZED)/$(OUTPUT_DEBUG_RPM) \
+		| cpio -i --to-stdout .$(VMLINUX_PATH) > $(MY_INSTALLER_FILES)/boot/vmlinux
+	objcopy --strip-debug --strip-unneeded $(MY_INSTALLER_FILES)/boot/vmlinux
+	gzip < $(MY_INSTALLER_FILES)/boot/vmlinux > $(MY_MAIN_CDFILES)/boot/vmlinux.gz
+
+	rm -rf $(MY_INSTALLER_FILES)/boot
+	touch $@
+
+$(MY_OUTPUT_DIR)/kernel.inc: $(MY_OUTPUT_DIR)/.dirstamp
+	( echo KERNEL_PKG_NAME := kernel-$(LINUX_KABI_VERSION) ;\
+	  echo KERNEL_PKG_VERSION := $(PKG_VERSION) ;\
+	  echo KERNEL_PKG_ARCH := $(DOMAIN0_ARCH_OPTIMIZED) ;\
+	  echo KERNEL_PKG_FILE := RPMS/$(DOMAIN0_ARCH_OPTIMIZED)/$(OUTPUT_RPM) ;\
+	  echo LINUX_KABI_VERSION := $(LINUX_KABI_VERSION) ;\
+	) >$@
+
+$(BRANDING):
+	echo KERNEL_VERSION := $(PKG_VERSION) >$(BRANDING)
+	echo LINUX_KABI_VERSION := $(LINUX_KABI_VERSION) >>$(BRANDING)
+
+$(MY_SOURCES)/MANIFEST: $(MY_SOURCES_DIRSTAMP)
+	echo "$(COMPONENT) gpl file $(SRPM)" >$@
+
+.PHONY: sources
+sources: $(MY_SOURCES)/MANIFEST
+	@ :
+
+KABI := Module.symvers-$(LINUX_KABI_VERSION)
+MODULE_SYMVERS := /usr/src/kernels/$(LINUX_KABI_VERSION)-$(DOMAIN0_ARCH_OPTIMIZED)/Module.symvers
+
+#
+# Check the kernel ABI (KABI) has not changed.
+#
+# The format of kernel ABI version is V.P.0+A.
+#
+#   V - kernel version (e.g., 3)
+#   P - kernel patch level (e.g., 10)
+#   A - KABI version.
+#
+# Note that the version does not include the sub-level version used in
+# the stable kernels.  This allows the kernel updates to include the
+# latest stable release without changing the KABI.
+#
+# mk/ contains Module.symvers-<KABI version> files that the built RPMs
+# are checked against.
+#
+# The ABI is not checked on development kernels (those with a "0" ABI
+# version).
+#
+# If this check fails you can:
+#
+# 1. Remove or edit patches until the ABI is the same again.
+#
+# 2. Remove the functions from the KABI file (if those functions are
+#    guaranteed to not be used by any driver or third party module).
+#    Be careful with this option.
+#
+# 3. Increase the ABI version (in the abi-version patch) and rename
+#    the new ABI file to the new version and add it to the abi-version
+#    patch.
+#
+.PHONY: check-kernel-abi
+check-kernel-abi:
+	@set -xe ; \
+	if [ "$(KERNEL_EXTRAVERSION)" == "+0" ]; then \
+		exit 0 ; \
+	fi ; \
+	if [ -f $(KABI) ]; then \
+		rpm2cpio $(MY_OUTPUT_DIR)/RPMS/$(DOMAIN0_ARCH_OPTIMIZED)/$(OUTPUT_DEVEL_RPM) | \
+			cpio -i --to-stdout --quiet .$(MODULE_SYMVERS) \
+				> $(MY_OBJ_DIR)/$(KABI).new ; \
+		if ! ./check-kabi -k $(KABI) -s $(MY_OBJ_DIR)/$(KABI).new ; then \
+			cp -a $(MY_OBJ_DIR)/$(KABI).new $(KABI).new ; \
+			exit 1 ; \
+		fi ; \
+	else \
+		echo "'$(KABI)' missing" >&2 ; \
+		exit 1 ; \
+	fi
diff --git a/mk/check-kabi b/mk/check-kabi
new file mode 100755
index 0000000..da884e2
--- /dev/null
+++ b/mk/check-kabi
@@ -0,0 +1,169 @@
+#!/usr/bin/python
+#
+# check-kabi - Red Hat kABI reference checking tool
+#
+# We use this script to check against reference Module.kabi files.
+#
+# Author: Jon Masters <jcm@redhat.com>
+# Copyright (C) 2007 Red Hat, Inc.
+#
+# This software may be freely redistributed under the terms of the GNU
+# General Public License (GPL).
+
+# Changelog:
+# 
+# 2007/06/13 - Initial rewrite in python by Jon Masters.
+
+#
+# "make path/to/file.symtypes" will create a symtypes file for path/to/file.c to allow comparisons.
+#
+
+__author__ = "Jon Masters <jcm@redhat.com>"
+__version__ = "1.0"
+__date__ = "2007/06/13"
+__copyright__ = "Copyright (C) 2007 Red Hat, Inc"
+__license__ = "GPL"
+
+import getopt
+import os
+import re
+# import sha
+import string
+import sys
+
+true = 1
+false = 0
+
+sed_output = False
+
+def load_symvers(symvers,filename):
+	"""Load a Module.symvers file."""
+
+	symvers_file = open(filename,"r")
+
+	while true:
+		in_line = symvers_file.readline()
+		if in_line == "":
+			break
+		if in_line == "\n":
+			continue
+		checksum,symbol,directory,type = string.split(in_line)
+
+		symvers[symbol] = in_line[0:-1]
+
+def load_kabi(kabi,filename):
+	"""Load a Module.kabi file."""
+
+	kabi_file = open(filename,"r")
+
+	while true:
+		in_line = kabi_file.readline()
+		if in_line == "":
+			break
+		if in_line == "\n":
+			continue
+		checksum,symbol,directory,type = string.split(in_line)
+
+		kabi[symbol] = in_line[0:-1]
+
+def check_kabi(symvers,kabi):
+	"""Check Module.kabi and Module.symvers files."""
+
+	fail=0
+	warn=0
+	changed_symbols=[]
+	moved_symbols=[]
+
+	for symbol in kabi:
+		abi_hash,abi_sym,abi_dir,abi_type = string.split(kabi[symbol])
+		if symvers.has_key(symbol):
+			sym_hash,sym_sym,sym_dir,sym_type = string.split(symvers[symbol])
+			if abi_hash != sym_hash:
+				fail=1
+				changed_symbols.append(symbol)
+
+			if abi_dir != sym_dir:
+				warn=1
+				moved_symbols.append(symbol)
+		else:
+			if sed_output:
+				print "\\,%s\t%s\t%s\t%s,d;" \
+				      % (abi_hash, symbol, abi_dir, abi_type)
+			else:
+				print "%s not present in Module.symvers?" % symbol
+
+	if fail:
+		if not sed_output:
+			print "*** ERROR - ABI BREAKAGE WAS DETECTED ***"
+			print ""
+			print "The following symbols have been changed (this will cause an ABI breakage):"
+			print ""
+		for symbol in changed_symbols:
+			sym_hash,sym_sym,sym_dir,sym_type = string.split(symvers[symbol])
+			abi_hash,abi_abi,abi_dir,abi_type = string.split(kabi[symbol])
+			print "# %s" % symbol
+			if sed_output:
+				print "s,%s\t%s\t%s\t%s,%s\t%s\t%s\t%s,g;" \
+				      % (abi_hash, symbol, abi_dir, abi_type,
+					 sym_hash, symbol, sym_dir, sym_type)
+		print ""
+
+	if warn:
+		if not sed_output:
+			print "*** WARNING - ABI SYMBOLS MOVED ***"
+			print ""
+			print "The following symbols moved (typically caused by moving a symbol from being"
+			print "provided by the kernel vmlinux out to a loadable module):"
+			print ""
+		for symbol in moved_symbols:
+			print "# %s %s -> %s" % (symbol,abi_dir,sym_dir)
+			if sed_output:
+				sym_hash,sym_sym,sym_dir,sym_type = string.split(symvers[symbol])
+				abi_hash,abi_abi,abi_dir,abi_type = string.split(kabi[symbol])
+				print "s,%s\t%s\t%s\t%s,%s\t%s\t%s\t%s,g;" \
+				      % (abi_hash, symbol, abi_dir, abi_type,
+					 sym_hash, symbol, sym_dir, sym_type)
+		print ""
+
+	if fail:
+		sys.exit(1)
+	else:
+		sys.exit(0)
+
+def usage():
+	print """
+check-kabi: check Module.kabi and Module.symvers files.
+
+	check-kabi [ -k Module.kabi ] [ -s Module.symvers ]
+
+"""
+
+if __name__ == "__main__":
+
+	symvers_file = ""
+	kabi_file = ""
+
+	opts, args = getopt.getopt(sys.argv[1:], 'hk:s:S')
+
+	for o, v in opts:
+		if o == "-S":
+			sed_output = True
+		if o == "-s":
+			symvers_file = v
+		if o == "-h":
+			usage()
+			sys.exit(0)
+		if o == "-k":
+			kabi_file = v
+	
+	if (symvers_file == "") or (kabi_file == ""):
+		usage()
+		sys.exit(1)
+
+	symvers={}
+	kabi={}
+
+	load_symvers(symvers,symvers_file)
+	load_kabi(kabi,kabi_file)
+	check_kabi(symvers,kabi)
+
diff --git a/mk/kernel.spec.in b/mk/kernel.spec.in
new file mode 100644
index 0000000..f421f64
--- /dev/null
+++ b/mk/kernel.spec.in
@@ -0,0 +1,285 @@
+# -*- rpm-spec -*-
+
+# The full kernel uname version
+%define uname         @LINUX_KABI_VERSION@
+
+%ifarch %{ix86}
+%define target       %{_target_cpu}
+%define arch	     i386
+%endif
+
+%ifarch x86_64
+%define target       %{_target_cpu}
+%define arch         %{_target_cpu}
+%endif
+
+%define COMMON_MAKEOPTS %{?_smp_mflags}
+%define DEFINE_MAKEOPTS \
+	ARCH=%{arch}; \
+	unset CROSS_COMPILE; \
+ 	case ${ARCH} in \
+	    *64) [ $(uname -m) = ${ARCH} ] || CROSS_COMPILE=x86_64-linux- ;; \
+	esac ; \
+	MAKEOPTS="%{COMMON_MAKEOPTS} ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE}"
+
+
+#
+# First the general kernel required versions as per
+# Documentation/Changes
+#
+%define kernel_dot_org_conflicts  ppp < 2.4.3-3, isdn4k-utils < 3.2-32, nfs-utils < 1.0.7-12, e2fsprogs < 1.37-4, util-linux < 2.12, jfsutils < 1.1.7-2, reiserfs-utils < 3.6.19-2, xfsprogs < 2.6.13-4, procps < 3.2.5-6.3, oprofile < 0.9.1-2
+
+#
+# Then a series of requirements that are distribution specific, either
+# because we add patches for something, or the older versions have
+# problems with the newer kernel or lack certain things that make
+# integration in the distro harder than needed.
+#
+%define package_conflicts  initscripts < 7.23, udev < 145-11, iptables < 1.3.2-1, ipw2200-firmware < 2.4, iwl4965-firmware < 228.57.2, selinux-policy-targeted < 1.25.3-14, squashfs-tools < 4.0, wireless-tools < 29-3, bfa-firmware < 3.0.3.1
+
+#
+# Packages that need to be installed before the kernel is, because the %post
+# scripts use them.
+#
+%define kernel_prereq  fileutils, module-init-tools, initscripts >= 8.11.1-1, grubby >= 7.0.4-1
+
+#
+# don't use RPM's internal dependency generator, instead
+# just use our magic one that finds the versions of kernel modules for
+# provides and don't do any requires
+# (we used to just turn off AutoReqProv on all packages)
+#
+%define _use_internal_dependency_generator 0
+%define __find_provides %{nil}
+%define __find_requires %{nil}
+
+Name: kernel
+Vendor: @COMPANY_NAME@
+Group: System Environment/Kernel
+License: GPLv2
+Version: @PKG_VERSION@
+Release: @PKG_RELEASE@
+ExclusiveArch: noarch i686 x86_64
+ExclusiveOS: Linux
+Summary: The Linux kernel built for Xen.
+BuildRequires(pre): module-init-tools, patch >= 2.5.4, bash >= 2.03, sh-utils, tar
+BuildRequires(pre): bzip2, findutils, gzip, m4, perl, make >= 3.78
+BuildRequires: gcc >= 2.96-98, binutils >= 2.12, redhat-rpm-config >= 8.0.32.1
+Provides: kernel-uname-r = %{uname}
+Autoreqprov: no
+Requires(pre): %{kernel_prereq}
+Conflicts: %{kernel_dot_org_conflicts}
+Conflicts: %{package_conflicts}
+
+Source0: linux-%{version}-%{release}.tar.bz2
+Source1: kernel-%{arch}.config
+
+BuildRoot: %{_tmppath}/kernel-%{version}-root
+
+%description
+This package provides the Linux kernel for privileged and unprivileged domains.
+
+@REPO_VERSION@
+
+%package headers
+Summary: Header files for the Linux kernel for use by glibc
+Group: Development/System
+Obsoletes: glibc-kernheaders
+Provides: kernel-headers = %{uname}
+Conflicts: kernel-headers < %{uname}
+
+%description headers
+This package provides the C header files that specify the interface
+between the Linux kernel and userspace libraries & programs. The
+header files define structures and constants that are needed when
+building most standard programs. They are also required when
+rebuilding the glibc package.
+
+@REPO_VERSION@
+
+
+%package devel
+Summary: Development package for building kernel modules to match the xen kernel.
+Group: System Environment/Kernel
+AutoReqProv: no
+Provides: kernel-devel = %{uname}
+
+%description devel
+This package provides kernel headers and makefiles sufficient to build modules
+against the %{uname} kernel.
+
+@REPO_VERSION@
+
+
+#%package doc
+#Summary: Various documentation bits found in the kernel source.
+#Group: Documentation
+#
+#%description doc
+#This package contains documentation files from the kernel
+#source. Various bits of information about the Linux kernel and the
+#device drivers shipped with it are documented in these files.
+#
+#You'll want to install this package if you need a reference to the
+#options that can be passed to Linux kernel modules at load time.
+
+%prep 
+
+%setup -q -n %{name}-%{version} -c
+cd linux-%{version}
+%{DEFINE_MAKEOPTS}
+make ${MAKEOPTS} mrproper
+cp -f %{_sourcedir}/kernel-%{target}.config .config
+
+%build
+
+cd linux-%{version}
+%{DEFINE_MAKEOPTS}
+make ${MAKEOPTS} silentoldconfig
+if grep -q ^CONFIG_MODULES=y$ .config ; then
+    mkmodules=modules
+else
+    mkmodules=
+fi
+
+make ${MAKEOPTS} bzImage $mkmodules
+
+%install
+
+cd linux-%{version}
+%{DEFINE_MAKEOPTS}
+# Install kernel
+install -d -m 755 $RPM_BUILD_ROOT/boot
+install -m 644 .config $RPM_BUILD_ROOT/boot/config-%{uname}
+install -m 644 System.map $RPM_BUILD_ROOT/boot/System.map-%{uname}
+install -m 644 arch/x86/boot/bzImage $RPM_BUILD_ROOT/boot/vmlinuz-%{uname}
+
+install -d -m 755 $RPM_BUILD_ROOT/lib/modules/%{uname}
+if grep -q ^CONFIG_MODULES=y$ .config ; then
+    # Install modules
+    make ${MAKEOPTS} INSTALL_MOD_PATH=$RPM_BUILD_ROOT modules_install
+    # mark modules executable so that strip-to-file can strip them
+    find $RPM_BUILD_ROOT/lib/modules/%{uname} -name "*.ko" -type f | xargs chmod u+x
+    
+    # Remove files created by depmod. These are recreated at install time.
+    rm -f $RPM_BUILD_ROOT/lib/modules/%{uname}/modules.*
+fi
+
+# Save debuginfo
+install -d -m 755 $RPM_BUILD_ROOT/usr/lib/debug/lib/modules/%{uname}
+install -m 644 vmlinux $RPM_BUILD_ROOT/usr/lib/debug/lib/modules/%{uname}
+
+# Install -headers files
+make ${MAKEOPTS} INSTALL_HDR_PATH=$RPM_BUILD_ROOT/usr headers_install
+
+# Install -devel files
+install -d -m 755 $RPM_BUILD_ROOT/usr/src/kernels/%{uname}-%{target}
+
+# Setup -devel links correctly
+SOURCE=/usr/src/kernels/%{uname}-%{target}
+rm -f $RPM_BUILD_ROOT/lib/modules/%{uname}/build
+rm -f $RPM_BUILD_ROOT/lib/modules/%{uname}/source
+ln -sf $SOURCE $RPM_BUILD_ROOT/lib/modules/%{uname}/source
+ln -sf $SOURCE $RPM_BUILD_ROOT/lib/modules/%{uname}/build
+
+install -d -m 755 $RPM_BUILD_ROOT${SOURCE}/arch/x86/kernel
+
+cp --parents `find  -type f -name "Makefile*" -o -name "Kconfig*"` $RPM_BUILD_ROOT${SOURCE}
+if [ -e Module.symvers ]; then
+    install -m 644 Module.symvers $RPM_BUILD_ROOT${SOURCE}
+fi
+cp System.map $RPM_BUILD_ROOT${SOURCE}
+if [ -s Module.markers ]; then
+      cp Module.markers $RPM_BUILD_ROOT${SOURCE}
+fi
+# then drop all but the needed Makefiles/Kconfig files
+rm -rf $RPM_BUILD_ROOT${SOURCE}/Documentation
+rm -rf $RPM_BUILD_ROOT${SOURCE}/scripts
+rm -rf $RPM_BUILD_ROOT${SOURCE}/include
+install -m 644 arch/x86/kernel/asm-offsets.s $RPM_BUILD_ROOT${SOURCE}/arch/x86/kernel || :
+install -m 644 .config $RPM_BUILD_ROOT${SOURCE}
+install -m 644 .kernelrelease $RPM_BUILD_ROOT${SOURCE} || :
+cp -a scripts $RPM_BUILD_ROOT${SOURCE}
+cp -a arch/x86/scripts $RPM_BUILD_ROOT${SOURCE}/arch/x86 || :
+cp -a arch/x86/*lds $RPM_BUILD_ROOT${SOURCE}/arch/x86 || :
+rm -f $RPM_BUILD_ROOT${SOURCE}/scripts/*.o
+rm -f $RPM_BUILD_ROOT${SOURCE}/scripts/*/*.o
+
+if [ -d arch/x86/include ] ; then
+    cp -a --parents arch/x86/include $RPM_BUILD_ROOT${SOURCE}
+fi
+if [ -d arch/x86/syscalls ] ; then
+    cp -a --parents arch/x86/syscalls $RPM_BUILD_ROOT${SOURCE}
+fi
+
+cp -a include $RPM_BUILD_ROOT${SOURCE}/include
+
+rm -f $RPM_BUILD_ROOT${SOURCE}/include/Kbuild
+cp -a include/generated/uapi/linux/version.h $RPM_BUILD_ROOT${SOURCE}/include/linux/
+cp -a include/generated/autoconf.h $RPM_BUILD_ROOT${SOURCE}/include/linux/
+
+# Copy .config to include/config/auto.conf so "make prepare" is unnecessary.
+cp $RPM_BUILD_ROOT${SOURCE}/.config $RPM_BUILD_ROOT${SOURCE}/include/config/auto.conf
+
+# Make sure the Makefile, .config, auto.conf, autoconf.h and version.h have a matching 
+# timestamp so that external modules can be built
+touch -r $RPM_BUILD_ROOT${SOURCE}/Makefile $RPM_BUILD_ROOT${SOURCE}/.config
+touch -r $RPM_BUILD_ROOT${SOURCE}/Makefile $RPM_BUILD_ROOT${SOURCE}/include/config/auto.conf
+touch -r $RPM_BUILD_ROOT${SOURCE}/Makefile $RPM_BUILD_ROOT${SOURCE}/include/linux/autoconf.h
+touch -r $RPM_BUILD_ROOT${SOURCE}/Makefile $RPM_BUILD_ROOT${SOURCE}/include/linux/version.h
+touch -r $RPM_BUILD_ROOT${SOURCE}/Makefile $RPM_BUILD_ROOT${SOURCE}/include/generated/autoconf.h
+touch -r $RPM_BUILD_ROOT${SOURCE}/Makefile $RPM_BUILD_ROOT${SOURCE}/include/generated/uapi/linux/version.h
+
+# Firmware is provided by the linux-firmware package.
+rm -rf $RPM_BUILD_ROOT/lib/firmware
+
+find $RPM_BUILD_ROOT -name ..install.cmd -type f -delete
+
+%clean
+rm -rf $RPM_BUILD_ROOT
+
+%post
+args=--make-default
+exe=/sbin/new-kernel-pkg
+if [ -x /sbin/new-kernel-pkg.py ] ; then
+  exe=/sbin/new-kernel-pkg.py
+fi
+if grep -qs control_d /proc/xen/capabilities ; then
+  args="$args --multiboot=/boot/xen.gz"
+fi
+
+$exe --install --mkinitrd --depmod $args %{uname}
+
+%preun
+exe=/sbin/new-kernel-pkg
+if [ -x /sbin/new-kernel-pkg.py ] ; then
+  exe=/sbin/new-kernel-pkg.py
+fi
+$exe --remove --rminitrd --rmmoddep %{uname}
+
+%triggerin -- xen-hypervisor
+new-kernel-pkg --install %{uname}
+
+%files
+%defattr(-,root,root)
+/boot/vmlinuz-%{uname}
+/boot/System.map-%{uname}
+/boot/config-%{uname}
+%dir /lib/modules/%{uname}
+/lib/modules/%{uname}/kernel
+
+%files headers
+%defattr(-,root,root)
+/usr/include
+
+%files devel
+%defattr(-,root,root)
+/lib/modules/%{uname}/build
+/lib/modules/%{uname}/source
+%verify(not mtime) /usr/src/kernels/%{uname}-%{target}
+
+%changelog
+* Wed Sep 25 2013 Malcolm Crossley <malcolm.crossley@eu.citrix.com> - 3.10
+- Synced with elrepo kernel-ml packaging style
+* Thu Mar 29 2012 Simon Rowe <simon.rowe@eu.citrix.com> - 3.3.0-rc3
+- Packaged for XenServer
